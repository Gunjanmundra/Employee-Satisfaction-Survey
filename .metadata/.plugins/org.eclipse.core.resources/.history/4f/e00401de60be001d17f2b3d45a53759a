package com.example.employee.rest;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.employee.model.BenefitsAndCompensation;
import com.example.employee.model.CareerDevelopment;
import com.example.employee.model.WorkEnvironment;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@RestController
public class EmployeeRestController {

	@GetMapping("/")
	public List<Integer> home(HttpSession session) {
		List<Integer> values = (List<Integer>) session.getAttribute("MY_SESSION");

		if (values == null) {
			values = new ArrayList<>();
		}
		
		return "alues;
	}
	
	@PostMapping("/calculateHappinessIndex")
	public String calcalculateHappinessIndex(@RequestParam WorkEnvironment workEnvironment, @RequestParam BenefitsAndCompensation benefitsAndCompensation, @RequestParam CareerDevelopment careerDevelopment, @RequestParam int envTotalValue, int benefitTotalValue, int careerTotalValue, HttpServletRequest request) {

		int workEnv = 0, benefit = 0, career = 0;
		
		for(Field field : workEnvironment.getClass().getDeclaredFields()) {
			try {
				workEnv += (int)field.get(workEnvironment);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		
		for(Field field : benefitsAndCompensation.getClass().getDeclaredFields()) {
			try {
				benefit += (int)field.get(benefitsAndCompensation);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		
		for(Field field : careerDevelopment.getClass().getDeclaredFields()) {
			try {
				career += (int)field.get(careerDevelopment);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		
		List<Integer> values = new ArrayList<Integer>();
		values.add(workEnv);
		values.add(benefit);
		values.add(career);
		
		List<Integer> session = (List<Integer>) request.getSession().getAttribute("MY_SESSION");
		if (session == null) {
			session = new ArrayList<>();
			request.getSession().setAttribute("MY_SESSION", session);
		}
		session = values;
		request.getSession().setAttribute("MY_SESSION", session);

		return null;
	}
}

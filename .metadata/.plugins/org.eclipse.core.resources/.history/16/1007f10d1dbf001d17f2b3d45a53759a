package com.example.employee.rest;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.employee.model.EmployeeHappiness;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
public class EmployeeRestController {		
		
	@PostMapping("/calculateHappinessIndex")
	public List<Integer> calculateHappinessIndex(@RequestBody EmployeeHappiness employeeHappiness) {

		int workEnv = 0, benefit = 0, career = 0;
		
		for(Field field : employeeHappiness.workEnvironment.getClass().getDeclaredFields()) {
			try {
				workEnv += (int)field.get(employeeHappiness.workEnvironment);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		
		for(Field field : employeeHappiness.benefitsAndCompensation.getClass().getDeclaredFields()) {
			try {
				benefit += (int)field.get(employeeHappiness.benefitsAndCompensation);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		
		for(Field field : employeeHappiness.careerDevelopment.getClass().getDeclaredFields()) {
			try {
				career += (int)field.get(employeeHappiness.careerDevelopment);
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		
		workEnv = (int)((workEnv * 100.0f) / employeeHappiness.envTotalValue);
		benefit = (int)((benefit * 100.0f) / employeeHappiness.benefitTotalValue);
		career = (int)((career * 100.0f) / employeeHappiness.careerTotalValue);
		
		List<Integer> values = new ArrayList<Integer>();
		values.add(workEnv);
		values.add(benefit);
		values.add(career);
		

		return values;
	}
}
